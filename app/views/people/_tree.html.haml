- extra_cols = person.all_partners.size - 3
- if extra_cols > 0
  - fill_cols = 0
- else
  - fill_cols = -extra_cols
  - extra_cols = 0

#tree_container{ style: "width: #{ 1000 + (extra_cols * 100)}px;" }
  %table.tree
    %tr.greatgrandparents
      %td= tree_node person.mother.mother.mother rescue tree_node nil
      %td= tree_node person.mother.mother.father rescue tree_node nil
      %td= tree_node person.mother.father.mother rescue tree_node nil
      %td= tree_node person.mother.father.father rescue tree_node nil
      %td= tree_node person.father.mother.mother rescue tree_node nil
      %td= tree_node person.father.mother.father rescue tree_node nil
      %td= tree_node person.father.father.mother rescue tree_node nil
      %td= tree_node person.father.father.father rescue tree_node nil
      - extra_cols.times do
        %td
    %tr.grandparents
      %td(colspan="2")= tree_node person.mother.mother rescue tree_node nil
      %td(colspan="2")= tree_node person.mother.father rescue tree_node nil
      %td(colspan="2")= tree_node person.father.mother rescue tree_node nil
      %td(colspan="2")= tree_node person.father.father rescue tree_node nil
      - extra_cols.times do
        %td
    %tr.parents
      %td(colspan="4")= tree_node person.mother rescue tree_node nil
      %td(colspan="4")= tree_node person.father rescue tree_node nil
      - extra_cols.times do
        %td
    %tr
      %td(colspan="3")
      %td{ colspan: '2', class: (person.all_partners.size > 0 ? 'self' : nil) }
        = tree_node person, active: true
        = children_with :unknown
      - if person.all_partners.size > 0
        %td.partners{ colspan: person.all_partners.size }
          - person.all_partners.each do |partner|
            .partner
              = tree_node partner
              = children_with partner
      - fill_cols.times do
        %td
          &nbsp;
